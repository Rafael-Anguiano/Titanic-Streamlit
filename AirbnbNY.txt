import pandas as pd
import streamlit as st
import plotly.express as px

st.title('Titanit Dataset with Streamlit')
st.header('This is a Header')
st.markdown("**Bold Text**")


@st.cache
def get_data():
    URL = "http://data.insideairbnb.com/united-states/ny/new-york-city/2021-08-04/visualisations/listings.csv"
    return pd.read_csv(URL)

df = get_data()
st.dataframe(df.head())

st.code(
    """
    @st.cache
    def get_data():
        URL = "http://data.insideairbnb.com/united-states/ny/new-york-city/2021-08-04/visualisations/listings.csv"
        return pd.read_csv(URL)
    """, language="python"
)

# Step 3 - Column filter
st.subheader("Select a Column")
default_cols = ["name", "price"]
cols = st.multiselect("Columns", df.columns.tolist(), default = default_cols)
st.dataframe(df[cols].head(10))

# Step 1 sort
st.subheader("Sorting in tables")
st.text("The top five most expensive properties in Airbnb at paris")
st.write(df.query("price>=800").sort_values("price", ascending = False ).head())

# Step 2 Map Visualization
st.header("Map")
st.subheader("Most Expensive Properties")

st.map(df.query("price>=800")[["latitude", "longitude"]].dropna(how = "any"))



# Step 4 - Static grouping
st.subheader("Avg price for a room type")
st.table(df.groupby("room_type").price.mean().reset_index().round(2).sort_values("price", ascending=False))

# Step 5 - Distributions 
st.write('Select a range for pricing within the sidebar')
values = (st.sidebar.slider("Price Range", float(df.price.min()), float(df.price.clip(upper=1000.).max()), (10., 500.)))
hist = px.histogram(df.query(f"price.between{values}", engine='python'), x="price", nbins=10, title = "Price Distribution")
hist.update_xaxes(title="Price")
hist.update_yaxes(title="# of Apartments / Rooms / Hotels")
st.plotly_chart(hist)

# Step 6 - Radio Buttons
neighbourhood = st.radio("Neighbourhood", df.neighbourhood_group.unique())

@st.cache
def get_availability(neighbourhood):
    return df.query("""neighbourhood_group==@neighbourhood\
    and availability_365>0""").availability_365.describe(\
    percentiles=[.1, .25, .5, .75, .9, .99]).to_frame().T

st.table(get_availability(neighbourhood))