import pandas as pd 
import streamlit as st 
import plotly.express as px

st.title("Class of UMG")
st.header("this is a header")
st.markdown("*bold text*")

@st.cache
def get_data():
    URL = "http://data.insideairbnb.com/mexico/df/mexico-city/2021-07-18/visualisations/listings.csv"
    return pd.read_csv(URL)

df = get_data()
st.dataframe(df.head())

#sort
st.subheader("sorting in tables")
st.text("Sort by top most expensive")
st.write(df.query("price>=800").sort_values("price", ascending=False).head())

#mapa
st.header("Map")
st.subheader("Most Expensive properties")
st.map(df.query("price>=8000")[["latitude","longitude"]].dropna(how="any"))

#column filter
st.subheader("select a column to see")
default_cols = ["name", "host_id","price"]
cols = st.multiselect("Columns", df.columns.tolist(), default=default_cols)
st.dataframe(df[cols].head(10))

#Static grouping
st.subheader("Avg price for a room type")
st.table(df.groupby("room_type").price.mean().reset_index().round(2).sort_values("price",ascending=False))

#Distributions - sidebars
#st.write("Select a range for pricing within the sidebar")
#values = st.sidebar.slider("price range", float(df.price.min()), float(df.price.clip(upper=1000.).max()),(375., 13000.))
#hist = px.histogram(df.query(f"price.between{values}"), x="price", nbins=10, title="price distribution")
#hist.update_xaxes(title="Price")
#hist.update_yaxes(title="number of apartments/rooms/hotels")
#st.plotly_chart(hist)

#st.write("Select a range for pricing within the sidebar")
#values = st.sidebar.slider("Price Range", float(df.price.min()), float(df.price.clip(upper=1000.).max()), (10., 500.)) 
#hist = px.histogram(df.query(f"price.between{values}"), x="price", nbins=100, title= "Price Distrution") 
#hist.update_xaxes(title="Price") 
#hist.update_yaxes(title="# of Apartments/Rooms/Hotels") 
#st.plotly_chart(hist)

#radio buttons
neighbourhood = st.radio("Neighbourhood",df.neighbourhood.unique())

@st.cache
def get_availability(neighbourhood):
    return df.query("""neighbourhood_group==@neighbourhood and availability_365>0""").availability_365.describe(percentiles=[.1,.25,.5,.75,.9,.99]).to_frame().T

st.table(get_availability(neighbourhood))